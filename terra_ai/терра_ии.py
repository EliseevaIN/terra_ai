print('Идет проверка и установка дополнительных библиотек, необходимых для работы terra_ai')
print('Это может занять несколько минут...')
import subprocess, os, warnings, time
from pandas.core.common import SettingWithCopyWarning
from subprocess import STDOUT, check_call
from IPython import display
def выполнить_команду(команда='!ls'):
  proc = subprocess.Popen(f'{команда}', shell=True, stdin=None, stdout=open(os.devnull,"wb"), stderr=STDOUT, executable="/bin/bash")
  proc.wait()
  pass

выполнить_команду('apt install swig cmake libopenmpi-dev zlib1g-dev > /dev/null 2>&1')
выполнить_команду('pip -q install stable-baselines==2.5.1 box2d box2d-kengz > /dev/nul 2>&1')
выполнить_команду('pip -q install gym pyvirtualdisplay > /dev/null 2>&1')
выполнить_команду('pip -q install xvfbwrapper > /dev/null 2>&1')
выполнить_команду('apt-get update > /dev/null 2>&1')
выполнить_команду('sudo apt-get install xvfb > /dev/null 2>&1')
выполнить_команду('apt-get install xdpyinfo > /dev/null 2>&1')
выполнить_команду('pip -q install pymorphy2')

from . import датасет, модель, сегментация, traide, ряды, генетика, повышение_размерности, обнаружение, обработка_текста, сегментация_договоров, квартиры, home
import seaborn as sns
sns.set_style('darkgrid')
warnings.simplefilter(action="ignore", category=SettingWithCopyWarning)

display.clear_output(wait=True)
print('Все нобходимые библиотеки установлены и готовы к работе')

def загрузить_базу(база = '', справка = False):
  return датасет.загрузить_базу(
    база = база,
    справка = справка	
)

### ДАТАСЕТ
def показать_примеры(**kwargs):
  датасет.показать_примеры(**kwargs)

def показать_пример_договора(количество = 1):
    сегментация_договоров.показать_пример(количество)

def показать_пример_трафика(старт, финиш):
    return ряды.показать_примеры(старт, финиш)

def показать_пример_квартиры(количество = 1):
    квартиры.samples(количество)

def показать_примеры_голосовых_команд():
    home.показать_примеры_голосовых_команд()

def показать_примеры_для_трейдинга(данные):
    traide.show_data(данные)

def предобработка_данных(**kwargs):
  return датасет.предобработка_данных(**kwargs)

def инициализировать_под_базу(arr):
  return arr.shape[1:]

def создать_выборки(путь, размер, коэф_разделения=0.9):
  return датасет.создать_выборки(путь, размер, коэф_разделения)

def создать_выборки_симптомов():
  return обработка_текста.создать_выборки(50)

def создать_выборки_квартир():
  return квартиры.создать_выборки()

def создать_выборки_для_торговли(акции,количество_анализируемых_дней,период_предсказания):
  return traide.получить_данные(акции,
  количество_анализируемых_дней,
  период_предсказания)

def создать_выборки_голосовых_команд():
  return home.создать_выборки()

def создать_выборки_трафик():
  return ряды.создать_выборки_трафик()

def создать_выборки_договоров(договора):
  return сегментация_договоров.создать_выборки_договоров(договора)
  
def создать_выборки_для_чатбота(вопросы, ответы,количество_пар=10000):
  return обработка_текста.создать_выборки_чатбота(вопросы, ответы,количество_пар)
  
def создать_выборки_для_сегментации(images_airplane, segments_airplane):
   return сегментация.create_xy(images_airplane, segments_airplane)

def создать_выборки_для_повышения_размерности():  
  return повышение_размерности.генератор_данных_DIV2K()

# МОДЕЛЬ
def схема_модели(мод):
  return модель.схема_модели(мод)

def обучение_модели_квартиры(мод, x_train, y_train, x_test=None, y_test=None, размер_пакета=None, количество_эпох=None, коэф_разделения = 0.2, инструменты = None):  
  модель.обучение_модели_квартиры(мод, x_train, y_train, x_test, y_test, размер_пакета, количество_эпох, коэф_разделения, инструменты)  

def обучение_модели(мод, x_train, y_train, x_test=None, y_test=None, размер_пакета=None, количество_эпох=None, коэф_разделения = 0.2):
   модель.обучение_модели(мод, x_train, y_train, x_test, y_test, размер_пакета, количество_эпох, коэф_разделения)

def обучение_модели_трафик(мод, ген1, ген2, количество_эпох=None):
  модель.обучение_модели_трафик(мод, ген1, ген2, количество_эпох) 

def тест_модели(нейронка, тестовый_набор, правильные_ответы, классы, количество=1):
  модель.тест_модели(нейронка, тестовый_набор, правильные_ответы, классы, количество)

def тест_модели_симптомы(нейронка, симптомы):
    обработка_текста.тест_модели(нейронка, симптомы)
    
def тест_модели_на_своем_изображении(нейронка, размер_изображения, классы):
  модель.тест_на_своем_изображении(нейронка, размер_изображения, классы)

def тест_модели_сегментации(мод, тестовые_изображения,  **kwargs):
  сегментация.тест_модели(мод, тестовые_изображения,  **kwargs)

def тест_модели_сегментации_договоров(мод, теги, договора):
  сегментация_договоров.тест_модели(мод, теги, договора)

def тест_модели_торговли(нейронка,тестовая_выборка, метки_тестовой_выборки, данные, период_предсказания,количество_анализируемых_дней):
  traide.model_test(
    нейронка, 
    тестовая_выборка, метки_тестовой_выборки,
    данные,
    период_предсказания,
    количество_анализируемых_дней)

def тест_модели_повышения_размерности(нейронка):
  модель.тест_модели_HR(нейронка)

def торговля(нейронка_1, тестовая_выборка, данные, тип):
  traide.traiding(нейронка_1, тестовая_выборка, данные, тип)

def тест_чат_бота(нейронка, размер_словаря, энкодер, декодер):
  обработка_текста.тест_модели_чат_бот(нейронка, размер_словаря, энкодер, декодер)
  
def тест_обученного_чат_бота():
  обработка_текста.загрузить_предобученную_модель()
  
def тест_модели_голосовых_команд(нейронка, порог):
  home.тест_модели(нейронка, порог)

def тест_модели_обнаружения_людей(нейронка):
  обнаружение.тест_модели()

def тест_модели_трафика(мод, данные):
  ряды.тест_модели_трафика(мод, данные)

def тест_модели_квартиры(нейронка, инструменты, *данные,):
  квартиры.тест_модели(нейронка, инструменты, *данные,)

def создать_сеть(**kwargs):
  return модель.создать_сеть(**kwargs)

def создать_составную_сеть(данные, *нейронки):
  return модель.создать_составную_сеть(данные, *нейронки)

def создать_составную_сеть_квартиры(данные, *нейронки):
  return модель.создать_составную_сеть_квартиры(данные, *нейронки)

def создать_сеть_чат_бот(размер_словаря, энкодер, декодер):
  return модель.создать_сеть_чат_бот(размер_словаря, энкодер, декодер)
  
def создать_PSP(**kwargs):
  return модель.создать_PSP(**kwargs)

def создать_UNET(**kwargs):
  return модель.создать_UNET(**kwargs)

def создать_модель_повышения_размерности():
  return модель.создать_модель_HighResolution()()

def загрузить_модель_повышения_размерности():
  return повышение_размерности.загрузить_веса_готовой_модели()

def загрузка_обученной_модели_обнаружения_людей():
  обнаружение.cоздать_модель_YOLO()
  return 0